package com.elog.fs.admin.${cfg.packageName}.export;

import com.elog.fs.admin.codeproduct.entity.CodeProduct;
import com.elog.fs.admin.codeproduct.service.CodeProductService;
import com.elog.fs.admin.vo.OmuiPage;
import com.fengmi.ddj.common.export.AbstractCSVExportService;
import com.fengmi.ddj.common.util.Collections3;
import com.fengmi.ddj.common.util.ParameterUtil;
import org.apache.commons.lang3.StringUtils;
import org.elogside.modules.utils.web.ServletUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
#set ($exportDTO = ${entity}+"DTO")
@Component
public class ${entity}ExportService extends AbstractCSVExportService<${exportDTO}> {

    @Resource
    private ${entity}Service ${table.entityPath}Service;

    Map<String, Object> searchMap;

    @Override
    public void prepareExport(Map<String, Object> parameterMap) {
        searchMap = ParameterUtil.getParametersStartingWith(parameterMap,"filter_");
        Iterator<String> iterator = searchMap.keySet().iterator();
        while (iterator.hasNext()) {
            String key = iterator.next();
            String value = (String) searchMap.get(key);
            if (StringUtils.isEmpty(value)) {
                iterator.remove();
                continue;
            }
        }
    }

    @Override
    public int queryTotal() {
        int total = (int)${table.entityPath}Service.count(searchMap);
        return total;
    }

    @Override
    public List<${exportDTO}> queryList(int start, int size) {
        List<${exportDTO}> resultList = new ArrayList<>();
        List<${entity}> list = ${table.entityPath}Service.queryList(searchMap,start,size);
        for (${entity} cp:list) {
                ${exportDTO} ${table.entityPath}DTO = new ${exportDTO}();
            BeanUtils.copyProperties(cp,${table.entityPath}DTO,new String[]{});
            resultList.add(${table.entityPath}DTO);
        }
        return resultList;
    }

    @Override
    public String[] getTableHead() {
        String[] head = new String[]{
                "创建时间","修改时间",
#foreach($field in ${table.fields})
    #set($comment = "")
    #set($type = "")
    #set($isNullAble = true)
    #set($defaultValue = false)
    #set($listIsShow = true)
    #set($listIsSearch = false)
    #foreach( $e in $field.comment.split(","))
        #if( $foreach.count == 1 )
            #set($comment = $e)
        #elseif( $foreach.count == 2 )
            #set($type = $e)
        #elseif( $foreach.count == 3)
            #if($e == "YES")
                #set($isNullAble = true)
            #else
                #set($isNullAble = false)
            #end
        #elseif( $foreach.count == 4)
            #if($e == "true")
                #set($defaultValue = true)
            #else
                #set($defaultValue = false)
            #end
        #elseif( $foreach.count == 5)
            #if($e == "true")
                #set($listIsShow = true)
            #else
                #set($listIsShow = false)
            #end
        #elseif( $foreach.count == 6)
            #if($e == "true")
                #set($listIsSearch = true)
            #else
                #set($listIsSearch = false)
            #end
        #end
    #end
    #if(${field.keyFlag})
        #set($keyPropertyName=${field.propertyName})
    #end
    "${comment}"#if($foreach.hasNext),#end
    #end




        };
        return head;
    }

    @Override
    public String getFileName() {
        return "$!{tablecomment}";
    }

    @Override
    public Class<${exportDTO}> getClazz() {
        return ${exportDTO}.class;
    }
}
